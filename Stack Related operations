{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Design and Implement Stack Data Structure With all Stack Related Operations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implement Stack useing list "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of the stack :5\n",
      "5\n",
      "Number of element: 4\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "s=int(input(\"Size of the stack :\"))\n",
    "print(s)\n",
    "e=int(input(\"Number of element: \"))\n",
    "print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "##intialize a buffer list \n",
    "l=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The stack is empty\n"
     ]
    }
   ],
   "source": [
    "##check the stack is empty or not/is empty :\n",
    "if(len(l)==0):\n",
    "    print(\"The stack is empty\")\n",
    "else:\n",
    "    print(\"The stack is not empty\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the element: 1\n",
      "Enter the element: 2\n",
      "Enter the element: 3\n",
      "Enter the element: 4\n",
      "elments present in the stack are:  ['1', '2', '3', '4']\n"
     ]
    }
   ],
   "source": [
    "#enter the element into stack /Push \n",
    "\n",
    "for i in range (e):\n",
    "    item=input(\"Enter the element: \")\n",
    "    l.append(item)\n",
    "print(\"elments present in the stack are: \",l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The stack is partially filled\n"
     ]
    }
   ],
   "source": [
    "##is empty or is not empty :\n",
    "\n",
    "if(len(l)==s):\n",
    "    print(\"The stack is full\")\n",
    "if(len(l)!= 0):\n",
    "    print(\"The stack is partially filled\")\n",
    "else:\n",
    "    print(\"The stack is empty\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The popping element is : 4\n"
     ]
    }
   ],
   "source": [
    "#remove one element/ pop operation\n",
    "\n",
    "##Find out the popping element \n",
    "\n",
    "p=l[len(l)-1]\n",
    "print(\"The popping element is :\", p)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated stack is : ['1', '2', '3']\n"
     ]
    }
   ],
   "source": [
    "##Find out the updated stack :\n",
    "l.remove(p)\n",
    "print(\"Updated stack is :\",l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'3'"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##using pop function \n",
    "l.pop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated stack is : ['1', '2']\n"
     ]
    }
   ],
   "source": [
    "print(\"Updated stack is :\",l)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
